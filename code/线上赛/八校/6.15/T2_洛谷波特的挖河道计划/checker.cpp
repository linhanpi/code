#include "testlib.h"
#include <bits/stdc++.h>
using namespace std;const int abaaaabbaa=1e9,ababaabbaa=203;int abbbbbaaba,abbbbbaabb,abaaaabbab[ababaabbaa],ababaabbab[ababaabbaa];struct aaaaaaabba{int aaaaaaabab,aaaaaabbab;aaaaaaabba(int _x=0,int _y=0):aaaaaaabab(_x),aaaaaabbab(_y){}aaaaaaabba operator+(const aaaaaaabba &aaaaaaaaab)const{ return aaaaaaabba(aaaaaaabab+aaaaaaaaab.aaaaaaabab,aaaaaabbab+aaaaaaaaab.aaaaaabbab);}aaaaaaabba operator-(const aaaaaaabba &aaaaaaaaab) const{ return aaaaaaabba(aaaaaaabab-aaaaaaaaab.aaaaaaabab,aaaaaabbab-aaaaaaaaab.aaaaaabbab);}bool operator == (const aaaaaaabba &aaaaaaaaab) const{ return aaaaaaabab == aaaaaaaaab.aaaaaaabab && aaaaaabbab == aaaaaaaaab.aaaaaabbab;}bool operator != (const aaaaaaabba &aaaaaaaaab) const{ return aaaaaaabab != aaaaaaaaab.aaaaaaabab || aaaaaabbab != aaaaaaaaab.aaaaaabbab;}};typedef vector<aaaaaaabba> vpir;int aaaaaaaaab[ababaabbaa][ababaabbaa][4];void pre(){memset(abaaaabbab,-0x3f,sizeof abaaaabbab);memset(ababaabbab,-0x3f,sizeof ababaabbab);int aaaaaabaab=inf.readInt(1,100);struct seg{ int aaabaababb,abbbaaaaaa,aaabaabaab,ababaaaaaa;} a[ababaabbaa];for (int abbbaabaab=1;abbbaabaab <= aaaaaabaab;++abbbaabaab){int aaabaababb=inf.readInt(-abaaaabbaa,abaaaabbaa),abbbaaaaaa=inf.readInt(-abaaaabbaa,abaaaabbaa),aaabaabaab=inf.readInt(-abaaaabbaa,abaaaabbaa),ababaaaaaa=inf.readInt(-abaaaabbaa,abaaaabbaa);ensuref(aaabaababb == aaabaabaab || abbbaaaaaa == ababaaaaaa,"input segments are not parallel to the x-axis or y-axis.");a[abbbaabaab] ={aaabaababb,abbbaaaaaa,aaabaabaab,ababaaaaaa};abaaaabbab[++abbbbbaaba]=aaabaababb,abaaaabbab[++abbbbbaaba]=aaabaabaab,ababaabbab[++abbbbbaabb]=abbbaaaaaa,ababaabbab[++abbbbbaabb]=ababaaaaaa;}sort(abaaaabbab+1,abaaaabbab+abbbbbaaba+1),sort(ababaabbab+1,ababaabbab+abbbbbaabb+1);abbbbbaaba=unique(abaaaabbab+1,abaaaabbab+abbbbbaaba+1)-abaaaabbab-1,abbbbbaabb=unique(ababaabbab+1,ababaabbab+abbbbbaabb+1)-ababaabbab-1;auto Q=[&](int aaaaaaabab[],int abbbbbaaba,int v){ return lower_bound(aaaaaaabab+1,aaaaaaabab+1+abbbbbaaba,v)-aaaaaaabab;};for (int abbbaabaab=1;abbbaabaab <= aaaaaabaab;++abbbaabaab){auto [aaabaababb,abbbaaaaaa,aaabaabaab,ababaaaaaa]=a[abbbaabaab];aaabaababb=Q(abaaaabbab,abbbbbaaba,aaabaababb),aaabaabaab=Q(abaaaabbab,abbbbbaaba,aaabaabaab),abbbaaaaaa=Q(ababaabbab,abbbbbaabb,abbbaaaaaa),ababaaaaaa=Q(ababaabbab,abbbbbaabb,ababaaaaaa);if (aaabaababb > aaabaabaab) swap(aaabaababb,aaabaabaab);if (abbbaaaaaa > ababaaaaaa) swap(abbbaaaaaa,ababaaaaaa);if (aaabaababb == aaabaabaab){for (int abbbaabaab=abbbaaaaaa;abbbaabaab < ababaaaaaa;++abbbaabaab){ensuref(!aaaaaaaaab[aaabaababb][abbbaabaab][0] && !aaaaaaaaab[aaabaababb][abbbaabaab+1][2],"input segments overlapped.");aaaaaaaaab[aaabaababb][abbbaabaab][0]=aaaaaaaaab[aaabaababb][abbbaabaab+1][2]=1;}} else{for (int abbbaabaab=aaabaababb;abbbaabaab < aaabaabaab;++abbbaabaab){ensuref(!aaaaaaaaab[abbbaabaab][abbbaaaaaa][1] && !aaaaaaaaab[abbbaabaab+1][abbbaaaaaa][3],"input segments overlapped.");aaaaaaaaab[abbbaabaab][abbbaaaaaa][1]=aaaaaaaaab[abbbaabaab+1][abbbaaaaaa][3]=1;}}}}int aaaaabbaab,abaaaabaab;void cov(int aaaaabbabb,int abbbabaaaa,int aaababbabb,int abbbabaaba){auto Q=[&](int aaaaaaabab[],int abbbbbaaba,int v){ return lower_bound(aaaaaaabab+1,aaaaaaabab+1+abbbbbaaba,v)-aaaaaaabab;};int aaabaababb=Q(abaaaabbab,abbbbbaaba,aaaaabbabb),aaabaabaab=Q(abaaaabbab,abbbbbaaba,aaababbabb),abbbaaaaaa=Q(ababaabbab,abbbbbaabb,abbbabaaaa),ababaaaaaa=Q(ababaabbab,abbbbbaabb,abbbabaaba);if (abaaaabbab[aaabaababb] != aaaaabbabb || ababaabbab[abbbaaaaaa] != abbbabaaaa || abaaaabbab[aaabaabaab] != aaababbabb || ababaabbab[ababaaaaaa] != abbbabaaba)quitp(60,"unknown wrong answer.");if (aaabaababb > aaabaabaab) swap(aaabaababb,aaabaabaab);if (abbbaaaaaa > ababaaaaaa) swap(abbbaaaaaa,ababaaaaaa);if (aaabaababb == aaabaabaab){for (int abbbaabaab=abbbaaaaaa;abbbaabaab < ababaaaaaa;++abbbaabaab){if (!aaaaaaaaab[aaabaababb][abbbaabaab][0] || !aaaaaaaaab[aaabaababb][abbbaabaab+1][2])quitp(60,"output segments overlapped.");aaaaaaaaab[aaabaababb][abbbaabaab][0]--,aaaaaaaaab[aaabaababb][abbbaabaab+1][2]--;}} else if (abbbaaaaaa == ababaaaaaa){for (int abbbaabaab=aaabaababb;abbbaabaab < aaabaabaab;++abbbaabaab){if (!aaaaaaaaab[abbbaabaab][abbbaaaaaa][1] || !aaaaaaaaab[abbbaabaab+1][abbbaaaaaa][3])quitp(60,"output segments overlapped.");aaaaaaaaab[abbbaabaab][abbbaaaaaa][1]--,aaaaaaaaab[abbbaabaab+1][abbbaaaaaa][3]--;}} else quitp(60,"output segments are not parallel to the x-axis or y-axis.");}void chk(InStream& ouf,const char *typ){static int aaaaaaaaba[ababaabbaa][ababaabbaa][4];memcpy(aaaaaaaaba,aaaaaaaaab,sizeof aaaaaaaaab);vector<aaaaaaabba> a(aaaaabbaab);for (int abbbaabaab=0;abbbaabaab < aaaaabbaab;++abbbaabaab) a[abbbaabaab].aaaaaaabab=ouf.readInt(-abaaaabbaa,abaaaabbaa),a[abbbaabaab].aaaaaabbab=ouf.readInt(-abaaaabbaa,abaaaabbaa);for (int abbbaabaab=1;abbbaabaab < aaaaabbaab;++abbbaabaab){cov(a[abbbaabaab-1].aaaaaaabab,a[abbbaabaab-1].aaaaaabbab,a[abbbaabaab].aaaaaaabab,a[abbbaabaab].aaaaaabbab);}for (int abbbaabaab=1;abbbaabaab <= abbbbbaaba;++abbbaabaab) for (int abbaaabaab=1;abbaaabaab <= abbbbbaabb;++abbaaabaab) for (int aabbaabaab=0;aabbaabaab < 4;++aabbaabaab) if (aaaaaaaaab[abbbaabaab][abbaaabaab][aabbaabaab])quitp(60,"segments is not completely covered.");memcpy(aaaaaaaaab,aaaaaaaaba,sizeof aaaaaaaaab);}int main(int argc,char* argv[]){registerTestlibCmd(argc,argv);pre();aaaaabbaab=ouf.readInt(0,abaaaabbaa),abaaaabaab=ans.readInt(0,abaaaabbaa);if (aaaaabbaab != abaaaabaab) quitf(_wa,"first number is different. answer=%d,output=%d",abaaaabaab,aaaaabbaab);if (aaaaabbaab != 0){chk(ouf,"output");}quitf(_ok,"All corrected. mobai!!!!111");return 0;}
